// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Message {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_messages_GenMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.GenMessage, global::messages.GenMessage.Builder> internal__static_messages_GenMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_Login__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.Login, global::messages.Login.Builder> internal__static_messages_Login__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_PlayerState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.PlayerState, global::messages.PlayerState.Builder> internal__static_messages_PlayerState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_LoginReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.LoginReply, global::messages.LoginReply.Builder> internal__static_messages_LoginReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_StartPath__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.StartPath, global::messages.StartPath.Builder> internal__static_messages_StartPath__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_PlayerStartPath__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.PlayerStartPath, global::messages.PlayerStartPath.Builder> internal__static_messages_PlayerStartPath__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_MoveTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.MoveTo, global::messages.MoveTo.Builder> internal__static_messages_MoveTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_PlayerMoveTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.PlayerMoveTo, global::messages.PlayerMoveTo.Builder> internal__static_messages_PlayerMoveTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_PlayerLogin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.PlayerLogin, global::messages.PlayerLogin.Builder> internal__static_messages_PlayerLogin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_PlayerQuit__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.PlayerQuit, global::messages.PlayerQuit.Builder> internal__static_messages_PlayerQuit__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_messages_GenReplyMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::messages.GenReplyMsg, global::messages.GenReplyMsg.Builder> internal__static_messages_GenReplyMsg__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Message() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1tZXNzYWdlLnByb3RvEghtZXNzYWdlcyI0CgpHZW5NZXNzYWdlEhIKBHR5" + 
          "cGUYASACKAlSBHR5cGUSEgoEZGF0YRgCIAIoDFIEZGF0YSIhCgVMb2dpbhIY" + 
          "CgdlcXVpcElkGAEgAigJUgdlcXVpcElkIocBCgtQbGF5ZXJTdGF0ZRIUCgVp" + 
          "bmRleBgBIAIoBVIFaW5kZXgSDAoBeBgCIAIoAlIBeBIMCgF5GAMgAigCUgF5" + 
          "Eh4KCmNvbG9ySW5kZXgYBCACKAVSCmNvbG9ySW5kZXgSFAoFbGV2ZWwYBSAC" + 
          "KAVSBWxldmVsEhAKA2V4cBgGIAIoBVIDZXhwIrABCgpMb2dpblJlcGx5Eh8K" + 
          "CWVycm9yQ29kZRgBIAEoBToBMFIJZXJyb3JDb2RlEi8KB215U3RhdGUYAiAB" + 
          "KAsyFS5tZXNzYWdlcy5QbGF5ZXJTdGF0ZVIHbXlTdGF0ZRIvCgdwbGF5ZXJz" + 
          "GAMgAygLMhUubWVzc2FnZXMuUGxheWVyU3RhdGVSB3BsYXllcnMSHwoJdGlt" + 
          "ZXN0YW1wGAQgASgDOgEwUgl0aW1lc3RhbXAiaQoJU3RhcnRQYXRoEg4KAnN4" + 
          "GAEgAigCUgJzeBIOCgJzeRgCIAIoAlICc3kSDgoCZHgYAyACKAJSAmR4Eg4K" + 
          "AmR5GAQgAigCUgJkeRIcCgl0aW1lc3RhbXAYBSACKANSCXRpbWVzdGFtcCKF" + 
          "AQoPUGxheWVyU3RhcnRQYXRoEhQKBWluZGV4GAEgAigFUgVpbmRleBIOCgJz" + 
          "eBgCIAIoAlICc3gSDgoCc3kYAyACKAJSAnN5Eg4KAmR4GAQgAigCUgJkeBIO" + 
          "CgJkeRgFIAIoAlICZHkSHAoJdGltZXN0YW1wGAYgAigDUgl0aW1lc3RhbXAi" + 
          "agoGTW92ZVRvEgwKAXgYASACKAJSAXgSDAoBeRgCIAIoAlIBeRISCgRkaXJY" + 
          "GAMgAigCUgRkaXJYEhIKBGRpclkYBCACKAJSBGRpclkSHAoJdGltZXN0YW1w" + 
          "GAUgAigDUgl0aW1lc3RhbXAihgEKDFBsYXllck1vdmVUbxIUCgVpbmRleBgB" + 
          "IAIoBVIFaW5kZXgSDAoBeBgCIAIoAlIBeBIMCgF5GAMgAigCUgF5EhIKBGRp" + 
          "clgYBCACKAJSBGRpclgSEgoEZGlyWRgFIAIoAlIEZGlyWRIcCgl0aW1lc3Rh" + 
          "bXAYBiACKANSCXRpbWVzdGFtcCJiCgtQbGF5ZXJMb2dpbhI1CgpwbGF5ZXJE" + 
          "YXRhGAEgAigLMhUubWVzc2FnZXMuUGxheWVyU3RhdGVSCnBsYXllckRhdGES" + 
          "HAoJdGltZXN0YW1wGAIgAigDUgl0aW1lc3RhbXAiIgoKUGxheWVyUXVpdBIU" + 
          "CgVpbmRleBgBIAIoBVIFaW5kZXgiVgoLR2VuUmVwbHlNc2cSEgoEdHlwZRgB" + 
          "IAIoCVIEdHlwZRIfCgdpc1JlcGx5GAIgASgIOgVmYWxzZVIHaXNSZXBseRIS" + 
          "CgRkYXRhGAMgAigMUgRkYXRh");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_messages_GenMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_messages_GenMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.GenMessage, global::messages.GenMessage.Builder>(internal__static_messages_GenMessage__Descriptor,
                new string[] { "Type", "Data", });
        internal__static_messages_Login__Descriptor = Descriptor.MessageTypes[1];
        internal__static_messages_Login__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.Login, global::messages.Login.Builder>(internal__static_messages_Login__Descriptor,
                new string[] { "EquipId", });
        internal__static_messages_PlayerState__Descriptor = Descriptor.MessageTypes[2];
        internal__static_messages_PlayerState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.PlayerState, global::messages.PlayerState.Builder>(internal__static_messages_PlayerState__Descriptor,
                new string[] { "Index", "X", "Y", "ColorIndex", "Level", "Exp", });
        internal__static_messages_LoginReply__Descriptor = Descriptor.MessageTypes[3];
        internal__static_messages_LoginReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.LoginReply, global::messages.LoginReply.Builder>(internal__static_messages_LoginReply__Descriptor,
                new string[] { "ErrorCode", "MyState", "Players", "Timestamp", });
        internal__static_messages_StartPath__Descriptor = Descriptor.MessageTypes[4];
        internal__static_messages_StartPath__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.StartPath, global::messages.StartPath.Builder>(internal__static_messages_StartPath__Descriptor,
                new string[] { "Sx", "Sy", "Dx", "Dy", "Timestamp", });
        internal__static_messages_PlayerStartPath__Descriptor = Descriptor.MessageTypes[5];
        internal__static_messages_PlayerStartPath__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.PlayerStartPath, global::messages.PlayerStartPath.Builder>(internal__static_messages_PlayerStartPath__Descriptor,
                new string[] { "Index", "Sx", "Sy", "Dx", "Dy", "Timestamp", });
        internal__static_messages_MoveTo__Descriptor = Descriptor.MessageTypes[6];
        internal__static_messages_MoveTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.MoveTo, global::messages.MoveTo.Builder>(internal__static_messages_MoveTo__Descriptor,
                new string[] { "X", "Y", "DirX", "DirY", "Timestamp", });
        internal__static_messages_PlayerMoveTo__Descriptor = Descriptor.MessageTypes[7];
        internal__static_messages_PlayerMoveTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.PlayerMoveTo, global::messages.PlayerMoveTo.Builder>(internal__static_messages_PlayerMoveTo__Descriptor,
                new string[] { "Index", "X", "Y", "DirX", "DirY", "Timestamp", });
        internal__static_messages_PlayerLogin__Descriptor = Descriptor.MessageTypes[8];
        internal__static_messages_PlayerLogin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.PlayerLogin, global::messages.PlayerLogin.Builder>(internal__static_messages_PlayerLogin__Descriptor,
                new string[] { "PlayerData", "Timestamp", });
        internal__static_messages_PlayerQuit__Descriptor = Descriptor.MessageTypes[9];
        internal__static_messages_PlayerQuit__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.PlayerQuit, global::messages.PlayerQuit.Builder>(internal__static_messages_PlayerQuit__Descriptor,
                new string[] { "Index", });
        internal__static_messages_GenReplyMsg__Descriptor = Descriptor.MessageTypes[10];
        internal__static_messages_GenReplyMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::messages.GenReplyMsg, global::messages.GenReplyMsg.Builder>(internal__static_messages_GenReplyMsg__Descriptor,
                new string[] { "Type", "IsReply", "Data", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GenMessage : pb::GeneratedMessage<GenMessage, GenMessage.Builder> {
    private GenMessage() { }
    private static readonly GenMessage defaultInstance = new GenMessage().MakeReadOnly();
    private static readonly string[] _genMessageFieldNames = new string[] { "data", "type" };
    private static readonly uint[] _genMessageFieldTags = new uint[] { 18, 10 };
    public static GenMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GenMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GenMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_GenMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GenMessage, GenMessage.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_GenMessage__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _genMessageFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[1], Type);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GenMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GenMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GenMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GenMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GenMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GenMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GenMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GenMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GenMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GenMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GenMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GenMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GenMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GenMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GenMessage result;
      
      private GenMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          GenMessage original = result;
          result = new GenMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GenMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.GenMessage.Descriptor; }
      }
      
      public override GenMessage DefaultInstanceForType {
        get { return global::messages.GenMessage.DefaultInstance; }
      }
      
      public override GenMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GenMessage) {
          return MergeFrom((GenMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GenMessage other) {
        if (other == global::messages.GenMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_genMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _genMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static GenMessage() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Login : pb::GeneratedMessage<Login, Login.Builder> {
    private Login() { }
    private static readonly Login defaultInstance = new Login().MakeReadOnly();
    private static readonly string[] _loginFieldNames = new string[] { "equipId" };
    private static readonly uint[] _loginFieldTags = new uint[] { 10 };
    public static Login DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Login DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Login ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_Login__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Login, Login.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_Login__FieldAccessorTable; }
    }
    
    public const int EquipIdFieldNumber = 1;
    private bool hasEquipId;
    private string equipId_ = "";
    public bool HasEquipId {
      get { return hasEquipId; }
    }
    public string EquipId {
      get { return equipId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEquipId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginFieldNames;
      if (hasEquipId) {
        output.WriteString(1, field_names[0], EquipId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEquipId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, EquipId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Login ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Login MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Login prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Login, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Login cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Login result;
      
      private Login PrepareBuilder() {
        if (resultIsReadOnly) {
          Login original = result;
          result = new Login();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Login MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.Login.Descriptor; }
      }
      
      public override Login DefaultInstanceForType {
        get { return global::messages.Login.DefaultInstance; }
      }
      
      public override Login BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Login) {
          return MergeFrom((Login) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Login other) {
        if (other == global::messages.Login.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEquipId) {
          EquipId = other.EquipId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasEquipId = input.ReadString(ref result.equipId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEquipId {
        get { return result.hasEquipId; }
      }
      public string EquipId {
        get { return result.EquipId; }
        set { SetEquipId(value); }
      }
      public Builder SetEquipId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquipId = true;
        result.equipId_ = value;
        return this;
      }
      public Builder ClearEquipId() {
        PrepareBuilder();
        result.hasEquipId = false;
        result.equipId_ = "";
        return this;
      }
    }
    static Login() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerState : pb::GeneratedMessage<PlayerState, PlayerState.Builder> {
    private PlayerState() { }
    private static readonly PlayerState defaultInstance = new PlayerState().MakeReadOnly();
    private static readonly string[] _playerStateFieldNames = new string[] { "colorIndex", "exp", "index", "level", "x", "y" };
    private static readonly uint[] _playerStateFieldTags = new uint[] { 32, 48, 8, 40, 21, 29 };
    public static PlayerState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_PlayerState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerState, PlayerState.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_PlayerState__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public const int ColorIndexFieldNumber = 4;
    private bool hasColorIndex;
    private int colorIndex_;
    public bool HasColorIndex {
      get { return hasColorIndex; }
    }
    public int ColorIndex {
      get { return colorIndex_; }
    }
    
    public const int LevelFieldNumber = 5;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ExpFieldNumber = 6;
    private bool hasExp;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasColorIndex) return false;
        if (!hasLevel) return false;
        if (!hasExp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerStateFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[2], Index);
      }
      if (hasX) {
        output.WriteFloat(2, field_names[4], X);
      }
      if (hasY) {
        output.WriteFloat(3, field_names[5], Y);
      }
      if (hasColorIndex) {
        output.WriteInt32(4, field_names[0], ColorIndex);
      }
      if (hasLevel) {
        output.WriteInt32(5, field_names[3], Level);
      }
      if (hasExp) {
        output.WriteInt32(6, field_names[1], Exp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Y);
        }
        if (hasColorIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ColorIndex);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Level);
        }
        if (hasExp) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Exp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerState result;
      
      private PlayerState PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerState original = result;
          result = new PlayerState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.PlayerState.Descriptor; }
      }
      
      public override PlayerState DefaultInstanceForType {
        get { return global::messages.PlayerState.DefaultInstance; }
      }
      
      public override PlayerState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerState) {
          return MergeFrom((PlayerState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerState other) {
        if (other == global::messages.PlayerState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasColorIndex) {
          ColorIndex = other.ColorIndex;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
            case 21: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 29: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 32: {
              result.hasColorIndex = input.ReadInt32(ref result.colorIndex_);
              break;
            }
            case 40: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 48: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasColorIndex {
        get { return result.hasColorIndex; }
      }
      public int ColorIndex {
        get { return result.ColorIndex; }
        set { SetColorIndex(value); }
      }
      public Builder SetColorIndex(int value) {
        PrepareBuilder();
        result.hasColorIndex = true;
        result.colorIndex_ = value;
        return this;
      }
      public Builder ClearColorIndex() {
        PrepareBuilder();
        result.hasColorIndex = false;
        result.colorIndex_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
    }
    static PlayerState() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LoginReply : pb::GeneratedMessage<LoginReply, LoginReply.Builder> {
    private LoginReply() { }
    private static readonly LoginReply defaultInstance = new LoginReply().MakeReadOnly();
    private static readonly string[] _loginReplyFieldNames = new string[] { "errorCode", "myState", "players", "timestamp" };
    private static readonly uint[] _loginReplyFieldTags = new uint[] { 8, 18, 26, 32 };
    public static LoginReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_LoginReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginReply, LoginReply.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_LoginReply__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private int errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public int ErrorCode {
      get { return errorCode_; }
    }
    
    public const int MyStateFieldNumber = 2;
    private bool hasMyState;
    private global::messages.PlayerState myState_;
    public bool HasMyState {
      get { return hasMyState; }
    }
    public global::messages.PlayerState MyState {
      get { return myState_ ?? global::messages.PlayerState.DefaultInstance; }
    }
    
    public const int PlayersFieldNumber = 3;
    private pbc::PopsicleList<global::messages.PlayerState> players_ = new pbc::PopsicleList<global::messages.PlayerState>();
    public scg::IList<global::messages.PlayerState> PlayersList {
      get { return players_; }
    }
    public int PlayersCount {
      get { return players_.Count; }
    }
    public global::messages.PlayerState GetPlayers(int index) {
      return players_[index];
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasMyState) {
          if (!MyState.IsInitialized) return false;
        }
        foreach (global::messages.PlayerState element in PlayersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginReplyFieldNames;
      if (hasErrorCode) {
        output.WriteInt32(1, field_names[0], ErrorCode);
      }
      if (hasMyState) {
        output.WriteMessage(2, field_names[1], MyState);
      }
      if (players_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], players_);
      }
      if (hasTimestamp) {
        output.WriteInt64(4, field_names[3], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ErrorCode);
        }
        if (hasMyState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, MyState);
        }
        foreach (global::messages.PlayerState element in PlayersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginReply MakeReadOnly() {
      players_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginReply result;
      
      private LoginReply PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginReply original = result;
          result = new LoginReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.LoginReply.Descriptor; }
      }
      
      public override LoginReply DefaultInstanceForType {
        get { return global::messages.LoginReply.DefaultInstance; }
      }
      
      public override LoginReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginReply) {
          return MergeFrom((LoginReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginReply other) {
        if (other == global::messages.LoginReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasMyState) {
          MergeMyState(other.MyState);
        }
        if (other.players_.Count != 0) {
          result.players_.Add(other.players_);
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasErrorCode = input.ReadInt32(ref result.errorCode_);
              break;
            }
            case 18: {
              global::messages.PlayerState.Builder subBuilder = global::messages.PlayerState.CreateBuilder();
              if (result.hasMyState) {
                subBuilder.MergeFrom(MyState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MyState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.players_, global::messages.PlayerState.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public int ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(int value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasMyState {
       get { return result.hasMyState; }
      }
      public global::messages.PlayerState MyState {
        get { return result.MyState; }
        set { SetMyState(value); }
      }
      public Builder SetMyState(global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMyState = true;
        result.myState_ = value;
        return this;
      }
      public Builder SetMyState(global::messages.PlayerState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMyState = true;
        result.myState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMyState(global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMyState &&
            result.myState_ != global::messages.PlayerState.DefaultInstance) {
            result.myState_ = global::messages.PlayerState.CreateBuilder(result.myState_).MergeFrom(value).BuildPartial();
        } else {
          result.myState_ = value;
        }
        result.hasMyState = true;
        return this;
      }
      public Builder ClearMyState() {
        PrepareBuilder();
        result.hasMyState = false;
        result.myState_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::messages.PlayerState> PlayersList {
        get { return PrepareBuilder().players_; }
      }
      public int PlayersCount {
        get { return result.PlayersCount; }
      }
      public global::messages.PlayerState GetPlayers(int index) {
        return result.GetPlayers(index);
      }
      public Builder SetPlayers(int index, global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_[index] = value;
        return this;
      }
      public Builder SetPlayers(int index, global::messages.PlayerState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayers(global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_.Add(value);
        return this;
      }
      public Builder AddPlayers(global::messages.PlayerState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayers(scg::IEnumerable<global::messages.PlayerState> values) {
        PrepareBuilder();
        result.players_.Add(values);
        return this;
      }
      public Builder ClearPlayers() {
        PrepareBuilder();
        result.players_.Clear();
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static LoginReply() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StartPath : pb::GeneratedMessage<StartPath, StartPath.Builder> {
    private StartPath() { }
    private static readonly StartPath defaultInstance = new StartPath().MakeReadOnly();
    private static readonly string[] _startPathFieldNames = new string[] { "dx", "dy", "sx", "sy", "timestamp" };
    private static readonly uint[] _startPathFieldTags = new uint[] { 29, 37, 13, 21, 40 };
    public static StartPath DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StartPath DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StartPath ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_StartPath__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StartPath, StartPath.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_StartPath__FieldAccessorTable; }
    }
    
    public const int SxFieldNumber = 1;
    private bool hasSx;
    private float sx_;
    public bool HasSx {
      get { return hasSx; }
    }
    public float Sx {
      get { return sx_; }
    }
    
    public const int SyFieldNumber = 2;
    private bool hasSy;
    private float sy_;
    public bool HasSy {
      get { return hasSy; }
    }
    public float Sy {
      get { return sy_; }
    }
    
    public const int DxFieldNumber = 3;
    private bool hasDx;
    private float dx_;
    public bool HasDx {
      get { return hasDx; }
    }
    public float Dx {
      get { return dx_; }
    }
    
    public const int DyFieldNumber = 4;
    private bool hasDy;
    private float dy_;
    public bool HasDy {
      get { return hasDy; }
    }
    public float Dy {
      get { return dy_; }
    }
    
    public const int TimestampFieldNumber = 5;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSx) return false;
        if (!hasSy) return false;
        if (!hasDx) return false;
        if (!hasDy) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _startPathFieldNames;
      if (hasSx) {
        output.WriteFloat(1, field_names[2], Sx);
      }
      if (hasSy) {
        output.WriteFloat(2, field_names[3], Sy);
      }
      if (hasDx) {
        output.WriteFloat(3, field_names[0], Dx);
      }
      if (hasDy) {
        output.WriteFloat(4, field_names[1], Dy);
      }
      if (hasTimestamp) {
        output.WriteInt64(5, field_names[4], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSx) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Sx);
        }
        if (hasSy) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Sy);
        }
        if (hasDx) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Dx);
        }
        if (hasDy) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Dy);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StartPath ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartPath ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartPath ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartPath ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartPath ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartPath ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartPath ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartPath ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartPath ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartPath ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartPath MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartPath prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StartPath, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartPath cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StartPath result;
      
      private StartPath PrepareBuilder() {
        if (resultIsReadOnly) {
          StartPath original = result;
          result = new StartPath();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StartPath MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.StartPath.Descriptor; }
      }
      
      public override StartPath DefaultInstanceForType {
        get { return global::messages.StartPath.DefaultInstance; }
      }
      
      public override StartPath BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartPath) {
          return MergeFrom((StartPath) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StartPath other) {
        if (other == global::messages.StartPath.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSx) {
          Sx = other.Sx;
        }
        if (other.HasSy) {
          Sy = other.Sy;
        }
        if (other.HasDx) {
          Dx = other.Dx;
        }
        if (other.HasDy) {
          Dy = other.Dy;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startPathFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startPathFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSx = input.ReadFloat(ref result.sx_);
              break;
            }
            case 21: {
              result.hasSy = input.ReadFloat(ref result.sy_);
              break;
            }
            case 29: {
              result.hasDx = input.ReadFloat(ref result.dx_);
              break;
            }
            case 37: {
              result.hasDy = input.ReadFloat(ref result.dy_);
              break;
            }
            case 40: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSx {
        get { return result.hasSx; }
      }
      public float Sx {
        get { return result.Sx; }
        set { SetSx(value); }
      }
      public Builder SetSx(float value) {
        PrepareBuilder();
        result.hasSx = true;
        result.sx_ = value;
        return this;
      }
      public Builder ClearSx() {
        PrepareBuilder();
        result.hasSx = false;
        result.sx_ = 0F;
        return this;
      }
      
      public bool HasSy {
        get { return result.hasSy; }
      }
      public float Sy {
        get { return result.Sy; }
        set { SetSy(value); }
      }
      public Builder SetSy(float value) {
        PrepareBuilder();
        result.hasSy = true;
        result.sy_ = value;
        return this;
      }
      public Builder ClearSy() {
        PrepareBuilder();
        result.hasSy = false;
        result.sy_ = 0F;
        return this;
      }
      
      public bool HasDx {
        get { return result.hasDx; }
      }
      public float Dx {
        get { return result.Dx; }
        set { SetDx(value); }
      }
      public Builder SetDx(float value) {
        PrepareBuilder();
        result.hasDx = true;
        result.dx_ = value;
        return this;
      }
      public Builder ClearDx() {
        PrepareBuilder();
        result.hasDx = false;
        result.dx_ = 0F;
        return this;
      }
      
      public bool HasDy {
        get { return result.hasDy; }
      }
      public float Dy {
        get { return result.Dy; }
        set { SetDy(value); }
      }
      public Builder SetDy(float value) {
        PrepareBuilder();
        result.hasDy = true;
        result.dy_ = value;
        return this;
      }
      public Builder ClearDy() {
        PrepareBuilder();
        result.hasDy = false;
        result.dy_ = 0F;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static StartPath() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerStartPath : pb::GeneratedMessage<PlayerStartPath, PlayerStartPath.Builder> {
    private PlayerStartPath() { }
    private static readonly PlayerStartPath defaultInstance = new PlayerStartPath().MakeReadOnly();
    private static readonly string[] _playerStartPathFieldNames = new string[] { "dx", "dy", "index", "sx", "sy", "timestamp" };
    private static readonly uint[] _playerStartPathFieldTags = new uint[] { 37, 45, 8, 21, 29, 48 };
    public static PlayerStartPath DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerStartPath DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerStartPath ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_PlayerStartPath__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerStartPath, PlayerStartPath.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_PlayerStartPath__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public const int SxFieldNumber = 2;
    private bool hasSx;
    private float sx_;
    public bool HasSx {
      get { return hasSx; }
    }
    public float Sx {
      get { return sx_; }
    }
    
    public const int SyFieldNumber = 3;
    private bool hasSy;
    private float sy_;
    public bool HasSy {
      get { return hasSy; }
    }
    public float Sy {
      get { return sy_; }
    }
    
    public const int DxFieldNumber = 4;
    private bool hasDx;
    private float dx_;
    public bool HasDx {
      get { return hasDx; }
    }
    public float Dx {
      get { return dx_; }
    }
    
    public const int DyFieldNumber = 5;
    private bool hasDy;
    private float dy_;
    public bool HasDy {
      get { return hasDy; }
    }
    public float Dy {
      get { return dy_; }
    }
    
    public const int TimestampFieldNumber = 6;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        if (!hasSx) return false;
        if (!hasSy) return false;
        if (!hasDx) return false;
        if (!hasDy) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerStartPathFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[2], Index);
      }
      if (hasSx) {
        output.WriteFloat(2, field_names[3], Sx);
      }
      if (hasSy) {
        output.WriteFloat(3, field_names[4], Sy);
      }
      if (hasDx) {
        output.WriteFloat(4, field_names[0], Dx);
      }
      if (hasDy) {
        output.WriteFloat(5, field_names[1], Dy);
      }
      if (hasTimestamp) {
        output.WriteInt64(6, field_names[5], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (hasSx) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Sx);
        }
        if (hasSy) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Sy);
        }
        if (hasDx) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Dx);
        }
        if (hasDy) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, Dy);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(6, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerStartPath ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerStartPath ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerStartPath ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerStartPath ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerStartPath MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerStartPath prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerStartPath, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerStartPath cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerStartPath result;
      
      private PlayerStartPath PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerStartPath original = result;
          result = new PlayerStartPath();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerStartPath MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.PlayerStartPath.Descriptor; }
      }
      
      public override PlayerStartPath DefaultInstanceForType {
        get { return global::messages.PlayerStartPath.DefaultInstance; }
      }
      
      public override PlayerStartPath BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerStartPath) {
          return MergeFrom((PlayerStartPath) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerStartPath other) {
        if (other == global::messages.PlayerStartPath.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasSx) {
          Sx = other.Sx;
        }
        if (other.HasSy) {
          Sy = other.Sy;
        }
        if (other.HasDx) {
          Dx = other.Dx;
        }
        if (other.HasDy) {
          Dy = other.Dy;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerStartPathFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerStartPathFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
            case 21: {
              result.hasSx = input.ReadFloat(ref result.sx_);
              break;
            }
            case 29: {
              result.hasSy = input.ReadFloat(ref result.sy_);
              break;
            }
            case 37: {
              result.hasDx = input.ReadFloat(ref result.dx_);
              break;
            }
            case 45: {
              result.hasDy = input.ReadFloat(ref result.dy_);
              break;
            }
            case 48: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasSx {
        get { return result.hasSx; }
      }
      public float Sx {
        get { return result.Sx; }
        set { SetSx(value); }
      }
      public Builder SetSx(float value) {
        PrepareBuilder();
        result.hasSx = true;
        result.sx_ = value;
        return this;
      }
      public Builder ClearSx() {
        PrepareBuilder();
        result.hasSx = false;
        result.sx_ = 0F;
        return this;
      }
      
      public bool HasSy {
        get { return result.hasSy; }
      }
      public float Sy {
        get { return result.Sy; }
        set { SetSy(value); }
      }
      public Builder SetSy(float value) {
        PrepareBuilder();
        result.hasSy = true;
        result.sy_ = value;
        return this;
      }
      public Builder ClearSy() {
        PrepareBuilder();
        result.hasSy = false;
        result.sy_ = 0F;
        return this;
      }
      
      public bool HasDx {
        get { return result.hasDx; }
      }
      public float Dx {
        get { return result.Dx; }
        set { SetDx(value); }
      }
      public Builder SetDx(float value) {
        PrepareBuilder();
        result.hasDx = true;
        result.dx_ = value;
        return this;
      }
      public Builder ClearDx() {
        PrepareBuilder();
        result.hasDx = false;
        result.dx_ = 0F;
        return this;
      }
      
      public bool HasDy {
        get { return result.hasDy; }
      }
      public float Dy {
        get { return result.Dy; }
        set { SetDy(value); }
      }
      public Builder SetDy(float value) {
        PrepareBuilder();
        result.hasDy = true;
        result.dy_ = value;
        return this;
      }
      public Builder ClearDy() {
        PrepareBuilder();
        result.hasDy = false;
        result.dy_ = 0F;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static PlayerStartPath() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MoveTo : pb::GeneratedMessage<MoveTo, MoveTo.Builder> {
    private MoveTo() { }
    private static readonly MoveTo defaultInstance = new MoveTo().MakeReadOnly();
    private static readonly string[] _moveToFieldNames = new string[] { "dirX", "dirY", "timestamp", "x", "y" };
    private static readonly uint[] _moveToFieldTags = new uint[] { 29, 37, 40, 13, 21 };
    public static MoveTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MoveTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_MoveTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MoveTo, MoveTo.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_MoveTo__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public const int DirXFieldNumber = 3;
    private bool hasDirX;
    private float dirX_;
    public bool HasDirX {
      get { return hasDirX; }
    }
    public float DirX {
      get { return dirX_; }
    }
    
    public const int DirYFieldNumber = 4;
    private bool hasDirY;
    private float dirY_;
    public bool HasDirY {
      get { return hasDirY; }
    }
    public float DirY {
      get { return dirY_; }
    }
    
    public const int TimestampFieldNumber = 5;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasDirX) return false;
        if (!hasDirY) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _moveToFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[3], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[4], Y);
      }
      if (hasDirX) {
        output.WriteFloat(3, field_names[0], DirX);
      }
      if (hasDirY) {
        output.WriteFloat(4, field_names[1], DirY);
      }
      if (hasTimestamp) {
        output.WriteInt64(5, field_names[2], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
        }
        if (hasDirX) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, DirX);
        }
        if (hasDirY) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, DirY);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MoveTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MoveTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MoveTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MoveTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MoveTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MoveTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveTo result;
      
      private MoveTo PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveTo original = result;
          result = new MoveTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.MoveTo.Descriptor; }
      }
      
      public override MoveTo DefaultInstanceForType {
        get { return global::messages.MoveTo.DefaultInstance; }
      }
      
      public override MoveTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MoveTo) {
          return MergeFrom((MoveTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveTo other) {
        if (other == global::messages.MoveTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasDirX) {
          DirX = other.DirX;
        }
        if (other.HasDirY) {
          DirY = other.DirY;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasDirX = input.ReadFloat(ref result.dirX_);
              break;
            }
            case 37: {
              result.hasDirY = input.ReadFloat(ref result.dirY_);
              break;
            }
            case 40: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasDirX {
        get { return result.hasDirX; }
      }
      public float DirX {
        get { return result.DirX; }
        set { SetDirX(value); }
      }
      public Builder SetDirX(float value) {
        PrepareBuilder();
        result.hasDirX = true;
        result.dirX_ = value;
        return this;
      }
      public Builder ClearDirX() {
        PrepareBuilder();
        result.hasDirX = false;
        result.dirX_ = 0F;
        return this;
      }
      
      public bool HasDirY {
        get { return result.hasDirY; }
      }
      public float DirY {
        get { return result.DirY; }
        set { SetDirY(value); }
      }
      public Builder SetDirY(float value) {
        PrepareBuilder();
        result.hasDirY = true;
        result.dirY_ = value;
        return this;
      }
      public Builder ClearDirY() {
        PrepareBuilder();
        result.hasDirY = false;
        result.dirY_ = 0F;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static MoveTo() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerMoveTo : pb::GeneratedMessage<PlayerMoveTo, PlayerMoveTo.Builder> {
    private PlayerMoveTo() { }
    private static readonly PlayerMoveTo defaultInstance = new PlayerMoveTo().MakeReadOnly();
    private static readonly string[] _playerMoveToFieldNames = new string[] { "dirX", "dirY", "index", "timestamp", "x", "y" };
    private static readonly uint[] _playerMoveToFieldTags = new uint[] { 37, 45, 8, 48, 21, 29 };
    public static PlayerMoveTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerMoveTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMoveTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_PlayerMoveTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerMoveTo, PlayerMoveTo.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_PlayerMoveTo__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public const int DirXFieldNumber = 4;
    private bool hasDirX;
    private float dirX_;
    public bool HasDirX {
      get { return hasDirX; }
    }
    public float DirX {
      get { return dirX_; }
    }
    
    public const int DirYFieldNumber = 5;
    private bool hasDirY;
    private float dirY_;
    public bool HasDirY {
      get { return hasDirY; }
    }
    public float DirY {
      get { return dirY_; }
    }
    
    public const int TimestampFieldNumber = 6;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasDirX) return false;
        if (!hasDirY) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMoveToFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[2], Index);
      }
      if (hasX) {
        output.WriteFloat(2, field_names[4], X);
      }
      if (hasY) {
        output.WriteFloat(3, field_names[5], Y);
      }
      if (hasDirX) {
        output.WriteFloat(4, field_names[0], DirX);
      }
      if (hasDirY) {
        output.WriteFloat(5, field_names[1], DirY);
      }
      if (hasTimestamp) {
        output.WriteInt64(6, field_names[3], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Y);
        }
        if (hasDirX) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, DirX);
        }
        if (hasDirY) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, DirY);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(6, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerMoveTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerMoveTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerMoveTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerMoveTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMoveTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerMoveTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerMoveTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMoveTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMoveTo result;
      
      private PlayerMoveTo PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMoveTo original = result;
          result = new PlayerMoveTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMoveTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.PlayerMoveTo.Descriptor; }
      }
      
      public override PlayerMoveTo DefaultInstanceForType {
        get { return global::messages.PlayerMoveTo.DefaultInstance; }
      }
      
      public override PlayerMoveTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerMoveTo) {
          return MergeFrom((PlayerMoveTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMoveTo other) {
        if (other == global::messages.PlayerMoveTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasDirX) {
          DirX = other.DirX;
        }
        if (other.HasDirY) {
          DirY = other.DirY;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMoveToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMoveToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
            case 21: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 29: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 37: {
              result.hasDirX = input.ReadFloat(ref result.dirX_);
              break;
            }
            case 45: {
              result.hasDirY = input.ReadFloat(ref result.dirY_);
              break;
            }
            case 48: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasDirX {
        get { return result.hasDirX; }
      }
      public float DirX {
        get { return result.DirX; }
        set { SetDirX(value); }
      }
      public Builder SetDirX(float value) {
        PrepareBuilder();
        result.hasDirX = true;
        result.dirX_ = value;
        return this;
      }
      public Builder ClearDirX() {
        PrepareBuilder();
        result.hasDirX = false;
        result.dirX_ = 0F;
        return this;
      }
      
      public bool HasDirY {
        get { return result.hasDirY; }
      }
      public float DirY {
        get { return result.DirY; }
        set { SetDirY(value); }
      }
      public Builder SetDirY(float value) {
        PrepareBuilder();
        result.hasDirY = true;
        result.dirY_ = value;
        return this;
      }
      public Builder ClearDirY() {
        PrepareBuilder();
        result.hasDirY = false;
        result.dirY_ = 0F;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static PlayerMoveTo() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerLogin : pb::GeneratedMessage<PlayerLogin, PlayerLogin.Builder> {
    private PlayerLogin() { }
    private static readonly PlayerLogin defaultInstance = new PlayerLogin().MakeReadOnly();
    private static readonly string[] _playerLoginFieldNames = new string[] { "playerData", "timestamp" };
    private static readonly uint[] _playerLoginFieldTags = new uint[] { 10, 16 };
    public static PlayerLogin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerLogin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerLogin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_PlayerLogin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerLogin, PlayerLogin.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_PlayerLogin__FieldAccessorTable; }
    }
    
    public const int PlayerDataFieldNumber = 1;
    private bool hasPlayerData;
    private global::messages.PlayerState playerData_;
    public bool HasPlayerData {
      get { return hasPlayerData; }
    }
    public global::messages.PlayerState PlayerData {
      get { return playerData_ ?? global::messages.PlayerState.DefaultInstance; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerData) return false;
        if (!hasTimestamp) return false;
        if (!PlayerData.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerLoginFieldNames;
      if (hasPlayerData) {
        output.WriteMessage(1, field_names[0], PlayerData);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[1], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerData) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PlayerData);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerLogin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerLogin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerLogin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerLogin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerLogin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerLogin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerLogin result;
      
      private PlayerLogin PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerLogin original = result;
          result = new PlayerLogin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerLogin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.PlayerLogin.Descriptor; }
      }
      
      public override PlayerLogin DefaultInstanceForType {
        get { return global::messages.PlayerLogin.DefaultInstance; }
      }
      
      public override PlayerLogin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerLogin) {
          return MergeFrom((PlayerLogin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerLogin other) {
        if (other == global::messages.PlayerLogin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerData) {
          MergePlayerData(other.PlayerData);
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerLoginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::messages.PlayerState.Builder subBuilder = global::messages.PlayerState.CreateBuilder();
              if (result.hasPlayerData) {
                subBuilder.MergeFrom(PlayerData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerData = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerData {
       get { return result.hasPlayerData; }
      }
      public global::messages.PlayerState PlayerData {
        get { return result.PlayerData; }
        set { SetPlayerData(value); }
      }
      public Builder SetPlayerData(global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerData = true;
        result.playerData_ = value;
        return this;
      }
      public Builder SetPlayerData(global::messages.PlayerState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerData = true;
        result.playerData_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerData(global::messages.PlayerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerData &&
            result.playerData_ != global::messages.PlayerState.DefaultInstance) {
            result.playerData_ = global::messages.PlayerState.CreateBuilder(result.playerData_).MergeFrom(value).BuildPartial();
        } else {
          result.playerData_ = value;
        }
        result.hasPlayerData = true;
        return this;
      }
      public Builder ClearPlayerData() {
        PrepareBuilder();
        result.hasPlayerData = false;
        result.playerData_ = null;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static PlayerLogin() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerQuit : pb::GeneratedMessage<PlayerQuit, PlayerQuit.Builder> {
    private PlayerQuit() { }
    private static readonly PlayerQuit defaultInstance = new PlayerQuit().MakeReadOnly();
    private static readonly string[] _playerQuitFieldNames = new string[] { "index" };
    private static readonly uint[] _playerQuitFieldTags = new uint[] { 8 };
    public static PlayerQuit DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerQuit DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerQuit ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_PlayerQuit__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerQuit, PlayerQuit.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_PlayerQuit__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerQuitFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[0], Index);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerQuit ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerQuit ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerQuit ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerQuit ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerQuit ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerQuit MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerQuit prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerQuit, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerQuit cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerQuit result;
      
      private PlayerQuit PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerQuit original = result;
          result = new PlayerQuit();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerQuit MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.PlayerQuit.Descriptor; }
      }
      
      public override PlayerQuit DefaultInstanceForType {
        get { return global::messages.PlayerQuit.DefaultInstance; }
      }
      
      public override PlayerQuit BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerQuit) {
          return MergeFrom((PlayerQuit) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerQuit other) {
        if (other == global::messages.PlayerQuit.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerQuitFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerQuitFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static PlayerQuit() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GenReplyMsg : pb::GeneratedMessage<GenReplyMsg, GenReplyMsg.Builder> {
    private GenReplyMsg() { }
    private static readonly GenReplyMsg defaultInstance = new GenReplyMsg().MakeReadOnly();
    private static readonly string[] _genReplyMsgFieldNames = new string[] { "data", "isReply", "type" };
    private static readonly uint[] _genReplyMsgFieldTags = new uint[] { 26, 16, 10 };
    public static GenReplyMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GenReplyMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GenReplyMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::messages.Message.internal__static_messages_GenReplyMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GenReplyMsg, GenReplyMsg.Builder> InternalFieldAccessors {
      get { return global::messages.Message.internal__static_messages_GenReplyMsg__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int IsReplyFieldNumber = 2;
    private bool hasIsReply;
    private bool isReply_;
    public bool HasIsReply {
      get { return hasIsReply; }
    }
    public bool IsReply {
      get { return isReply_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _genReplyMsgFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[2], Type);
      }
      if (hasIsReply) {
        output.WriteBool(2, field_names[1], IsReply);
      }
      if (hasData) {
        output.WriteBytes(3, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (hasIsReply) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsReply);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GenReplyMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GenReplyMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GenReplyMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GenReplyMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GenReplyMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GenReplyMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GenReplyMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GenReplyMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GenReplyMsg result;
      
      private GenReplyMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          GenReplyMsg original = result;
          result = new GenReplyMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GenReplyMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::messages.GenReplyMsg.Descriptor; }
      }
      
      public override GenReplyMsg DefaultInstanceForType {
        get { return global::messages.GenReplyMsg.DefaultInstance; }
      }
      
      public override GenReplyMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GenReplyMsg) {
          return MergeFrom((GenReplyMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GenReplyMsg other) {
        if (other == global::messages.GenReplyMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIsReply) {
          IsReply = other.IsReply;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_genReplyMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _genReplyMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 16: {
              result.hasIsReply = input.ReadBool(ref result.isReply_);
              break;
            }
            case 26: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasIsReply {
        get { return result.hasIsReply; }
      }
      public bool IsReply {
        get { return result.IsReply; }
        set { SetIsReply(value); }
      }
      public Builder SetIsReply(bool value) {
        PrepareBuilder();
        result.hasIsReply = true;
        result.isReply_ = value;
        return this;
      }
      public Builder ClearIsReply() {
        PrepareBuilder();
        result.hasIsReply = false;
        result.isReply_ = false;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static GenReplyMsg() {
      object.ReferenceEquals(global::messages.Message.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
